# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZKEMDB_9z6-2vSqAHwJ9VfeAoNNV9_E
"""

from glob import glob
import os
import mne
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from joblib import load

# Load the model from the h5 file
model = load('trained_model.h5')

import mne
import numpy as np
from scipy import stats

def extract_features(file_path):
    # Load EEG data from the file
    data = mne.io.read_raw_edf(file_path, preload=True)
    data.set_eeg_reference()
    data.filter(l_freq=0.5, h_freq=45)

    # Create fixed-length epochs
    epochs = mne.make_fixed_length_epochs(data, duration=5, overlap=1)

    # Get data from epochs
    epoch_data = epochs.get_data()

    # Define feature extraction functions
    def mean(data):
        return np.mean(data, axis=-1)

    def std(data):
        return np.std(data, axis=-1)

    def ptp(data):
        return np.ptp(data, axis=-1)

    def var(data):
        return np.var(data, axis=-1)

    def minim(data):
        return np.min(data, axis=-1)

    def maxim(data):
        return np.max(data, axis=-1)

    def argminim(data):
        return np.argmin(data, axis=-1)

    def argmaxim(data):
        return np.argmax(data, axis=-1)

    def mean_square(data):
        return np.mean(data**2, axis=-1)

    def rms(data): #root mean square
        return np.sqrt(np.mean(data**2, axis=-1))

    def abs_diffs_signal(data):
        return np.sum(np.abs(np.diff(data, axis=-1)), axis=-1)

    def skewness(data):
        return stats.skew(data, axis=-1)

    def kurtosis(data):
        return stats.kurtosis(data, axis=-1)

    # Concatenate features
    features = np.concatenate((
        mean(epoch_data),
        std(epoch_data),
        ptp(epoch_data),
        var(epoch_data),
        minim(epoch_data),
        maxim(epoch_data),
        argminim(epoch_data),
        argmaxim(epoch_data),
        mean_square(epoch_data),
        rms(epoch_data),
        abs_diffs_signal(epoch_data),
        skewness(epoch_data),
        kurtosis(epoch_data)
    ), axis=-1)

    return features

def predict_mental_disorder_from_eeg(file_path):
    # Extract features from the EEG file
    features = extract_features(file_path)

    # Use the best estimator from GridSearchCV
    best_estimator = model.best_estimator_

    # Predict labels for the input features
    predictions = best_estimator.predict(features)

    # Map predictions to human-readable labels
    prediction_label = 'Healthy' if predictions[0] == 0 else 'Schizophrenia'

    return prediction_label

def final_pred(input):
    
    predicted_label = predict_mental_disorder_from_eeg(input)
    print("Predicted label:", predicted_label)
    return predicted_label


final_pred('data\s09.edf')

